@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    ViewData["Title"] = "EPO_01_00";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link href="~/css/Common/jquery.contextMenu.min.css" rel="stylesheet" />
<script src="~/js/Common/tinymce/tinymce.min.js"></script>

@section Scripts {
    <script src="~/js/Common/jquery.contextMenu.min.js"></script>
    <script src="~/js/Purchase/TermsAndConditions.js"></script>
}

@{
    var userFormRole = (eSyaEnterprise_UI.Models.DO_UserFormRole)ViewBag.UserFormRole;
}

<script>

    var _userFormRole = JSON.parse('@Html.Raw(Json.Serialize(userFormRole))');

    var localization = {

        Edit: '@Localizer["Edit"]',
        View: '@Localizer["View"]',
        Save: '@Localizer["Save"]',
        Delete: '@Localizer["Delete"]',
        Active: '@Localizer["Active"]',
        Actions: '@Localizer["Actions"]',
        Activate: '@Localizer["Activate"]',
        DActivate: '@Localizer["Deactivate"]',
        Cancel: '@Localizer["Cancel"]',

        TcType:'@Localizer["TcType"]',
        TcClass: '@Localizer["TcClass"]',
        TempDescription: '@Localizer["TempDescription"]',
        TcAnnexure: '@Localizer["TcAnnexure"]',
        TermsAndConditions: '@Localizer["TermsAndConditions"]',
        AddTermsAndConditions: '@Localizer["AddTermsAndConditions"]',
    }


</script>


<div class="row">
    <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
        <table id="jqgTermsAndConditions"></table>
        <div id="jqpTermsAndConditions"></div>
    </div>
</div>


<div class="modal fade in" id="PopupTermsAndConditions" data-bs-keyboard="false" data-bs-backdrop="static">
    <div class="modal-dialog modal-lg" role="document" style="box-shadow:none;">
        <div class="modal-content">
            <div class="modal-header popupHeader">
                <h5 class="modal-title">@Localizer["AddTermsAndConditions"] </h5>
                <button type="button" class="close ml-auto" data-bs-dismiss="modal"> <i class="fa fa-times"></i></button>
            </div>

            <div class="modal-body">
                <div class="row">
                 
                    <div class="col-lg-4 col-md-4 col-sm-12 col-6 form-group">
                        <label>@Localizer["TcClass"]</label>
                        <select class="selectpicker" data-size="4" data-container="body" id="cboTcClass">
                            <option value="0">@Localizer["Select"]</option>
                           
                        </select>
                    </div>

                    <div class="col-lg-8 col-md-8 col-sm-12 col-6 form-group">
                        <label for="txtTempDescription">@Localizer["TempDescription"] </label>
                        <input type="text" id="txtTempDescription" class="form-control" maxlength="75" />
                    </div>

                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                        <div class="form-group">
                            <label for="txtTcAnnexure">@Localizer["TcAnnexure"] </label>
                            <textarea id="txtTcAnnexure" class="form-control" rows="1" cols="4" autocomplete="off"></textarea>
                        </div>
                    </div>

                    <div class="col-lg-3  col-md-3 col-sm-12 col-xs-12 d-flex align-items-center">
                        <label class="mdl-checkbox mdl-js-checkbox mdl-js-ripple-effect" for="chkActiveStatus">
                            <input type="checkbox" id="chkActiveStatus" class="mdl-checkbox__input">
                            <span class="mdl-checkbox__label">@Localizer["Active"]</span>
                        </label>
                    </div>

                </div>
            </div>

            <div class="modal-footer">
                <div class="row">
                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                        <button class="mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent primary-button" id="btnSaveTermsAndConditions" onclick="fnSaveTermsAndConditions()">
                            <i class="fa fa-save"></i> @Localizer[" Save"]
                        </button>
                        <button class="mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect  cancel-button cancel-button" data-bs-dismiss="modal" id="btnCancelTermsAndConditions"><i class="fa fa-times"></i> @Localizer["Cancel"]  </button>
                       
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>






<script>
    $(document).ready(function () {
        tinymceinit();
    })
    function tinymceinit() {
        tinymce.init({
            selector: 'textarea#txtTcAnnexure',
            height: 120,
            menubar: true,
            fontsize_formats: "8pt 10pt 12pt 14pt 18pt 24pt 36pt",
            plugins: ' image textpattern textcolor colorpicker insertdatetime lists table tabfocus searchreplace hr visualblocks ',
            toolbar: ' undo redo | fontselect fontsizeselect formatselect | link image | bold underline | alignleft aligncenter alignright | forecolor backcolor | insertdatetime | bullist numlist | table | searchreplace | hr',
            insertdatetime_formats: ["%H:%M:%S", "%d-%m-%Y", "%I:%M:%S %p", "%D"],
            image_title: true,
            automatic_uploads: true,

            file_picker_types: 'image',
            file_picker_callback: function (cb, value, meta) {
                var input = document.createElement('input');
                input.setAttribute('type', 'file');
                input.setAttribute('accept', 'image/*');

                input.onchange = function () {
                    var file = this.files[0];

                    var reader = new FileReader();
                    reader.onload = function () {

                        var id = 'blobid' + (new Date()).getTime();
                        var blobCache = tinymce.activeEditor.editorUpload.blobCache;
                        var base64 = reader.result.split(',')[1];
                        var blobInfo = blobCache.create(id, file, base64);
                        blobCache.add(blobInfo);

                        cb(blobInfo.blobUri(), { title: file.name });
                    };
                    reader.readAsDataURL(file);
                };

                input.click();
            },
            init_instance_callback: function (editor) {
                var freeTiny = document.querySelector('.tox .tox-notification--in');
                //freeTiny.style.display = 'none';
            }
        });
    }
</script>