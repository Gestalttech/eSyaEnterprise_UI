using DocumentFormat.OpenXml.Office2016.Drawing.ChartDrawing;
using eSyaEnterprise_UI.Models;
using Microsoft.AspNetCore.Localization;
using Microsoft.AspNetCore.Mvc.Razor;
using Microsoft.Extensions.Options;
using System.Configuration;
using System.Globalization;
using System.Configuration;
using DocumentFormat.OpenXml.InkML;
using NuGet.Configuration;
using eSyaEssentials_UI;
using eSyaEnterprise_UI.DataServices;
using eSyaEnterprise_UI.Utility;
using Microsoft.AspNetCore.Http.Features;
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Authentication.Cookies;
using eSyaEnterprise_UI.ActionFilter;
using Microsoft.Extensions.Localization;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json.Serialization;

var builder = WebApplication.CreateBuilder(args);


builder.Services.AddRazorPages().AddRazorRuntimeCompilation();
// Add services to the container.
builder.Services.AddControllersWithViews()
                .AddDataAnnotationsLocalization();

//builder.Services.AddLocalization(options => options.ResourcesPath = "Resources");

builder.Services.AddMvc()
    .AddViewLocalization(LanguageViewLocationExpanderFormat.Suffix)
    .AddDataAnnotationsLocalization();


var sessionTimeout = Convert.ToInt32(builder.Configuration.GetSection("SessionTimeInMintues").GetSection("TimeOut").Value ?? "30");


//var sessionTimeout = Convert.ToInt32(Configuration.GetSection("SessionTimeInMintues").GetSection("TimeOut").Value ?? "30");

// Sesssion
builder.Services.AddDistributedMemoryCache();
builder.Services.AddSession(options =>
{
    options.Cookie.Path = "/";
    options.IdleTimeout = TimeSpan.FromMinutes(sessionTimeout);
    options.Cookie.HttpOnly = true;
    options.Cookie.IsEssential = true;
});

builder.Services.Configure<CookiePolicyOptions>(options =>
{
    options.CheckConsentNeeded = context => true;
    options.MinimumSameSitePolicy = SameSiteMode.None;
});

builder.Services.Configure<DO_AppConfig>(builder.Configuration.GetSection("cnf"));

builder.Services.Configure<DO_PasswordPolicy>(builder.Configuration.GetSection("PasswordPolicy"));

builder.Services.AddHttpClient<IHttpClientServices, HttpClientServices>();

//services.AddHttpClient<IPatientCareAPIServices, PatientCareAPIServices>(p =>
//{
//    p.BaseAddress = new Uri(Configuration.GetValue<string>("PatientCare_API"));
//    p.DefaultRequestHeaders.Add("dbContextType", Configuration.GetValue<string>("dbContextType"));
//    p.DefaultRequestHeaders.Add("Apikey", Configuration.GetValue<string>("Apikey"));
//});

//services.AddSingleton<IUserAccountServices, UserAccountServices>();
//services.AddSingleton<IPasswordPolicy, PasswordPolicy>();
//services.AddSingleton<ISmsServices, SmsServices>();
//services.AddSingleton<IApplicationRulesServices, ApplicationRulesServices>();
//services.AddSingleton<IRazorpayClientServices, RazorpayClientServices>();

builder.Services.Configure<RequestLocalizationOptions>(options =>
{
    var supportedCultures = new List<CultureInfo>
    {
        new CultureInfo("en-US"),
        new CultureInfo("ar-EG")
    };
    options.DefaultRequestCulture = new RequestCulture("en-US");
    options.SupportedCultures=new List<CultureInfo> { new CultureInfo("en-US") };
    options.SupportedUICultures=supportedCultures;
    options.RequestCultureProviders = new List<IRequestCultureProvider>
    {
        new QueryStringRequestCultureProvider(),
        new CookieRequestCultureProvider()
    };

});

builder.Services.Configure<FormOptions>(options =>
{
    options.ValueCountLimit = int.MaxValue;  // 200 items max
                                             //  options.ValueLengthLimit = 1024 * 1024 * 100; // 100MB max len form data
});

builder.Services.AddDbContext<ApplicationDbContext>(options =>
{

    options.UseSqlServer(builder.Configuration.GetConnectionString("dbConn_eSyaEnterprise"));

});

builder.Services.AddIdentity<ApplicationUser, ApplicationRole>()
               .AddEntityFrameworkStores<ApplicationDbContext>()
               .AddDefaultTokenProviders();

builder.Services.AddAuthentication(options =>
{
    options.DefaultSignInScheme = CookieAuthenticationDefaults.AuthenticationScheme;
    options.DefaultAuthenticateScheme = CookieAuthenticationDefaults.AuthenticationScheme;
    options.DefaultChallengeScheme = CookieAuthenticationDefaults.AuthenticationScheme;
}).
AddCookie(options => { options.LoginPath = "/Login"; });

//builder.Services.AddSingleton<ViewBagActionFilter>();

//builder.Services.AddSingleton<IStringLocalizerFactory, JsonStringLocalizerFactory>();
//builder.Services.AddSingleton<IStringLocalizer, JsonDbContextStringLocalizer>();

builder.Services.AddMvc()
               .AddSessionStateTempDataProvider();

//builder.Services.AddMvc()
              
//               .AddViewLocalization(LanguageViewLocationExpanderFormat.Suffix)
//               .AddDataAnnotationsLocalization()
             
//              .AddJsonOptions(options => options.SerializerSettings.ContractResolver = new DefaultContractResolver())
//              .SetCompatibilityVersion(CompatibilityVersion.Version_2_2);

builder.Services.AddSingleton<IHttpContextAccessor, HttpContextAccessor>();


var app = builder.Build();

// Enable the localization middleware
var localizeOptions = app.Services.GetRequiredService<IOptions<RequestLocalizationOptions>>();
var options = localizeOptions.Value;
app.UseRequestLocalization(options);

// Configure the HTTP request pipeline.
if (!app.Environment.IsDevelopment())
{
    app.UseExceptionHandler("/Home/Error");
}
app.UseStaticFiles();

app.UseRouting();

app.UseAuthorization();

app.MapControllerRoute(
    name: "MyArea",
    pattern: "{area:exists}/{controller=Home}/{action=Index}/{id?}");

app.MapControllerRoute(
    name: "default",
    pattern: "{controller=Account}/{action=Index}/{id?}");

app.Run();
