
using eSyaEnterprise_UI.ActionFilter;
using eSyaEnterprise_UI.Areas.ProductSetup.Data;
using eSyaEnterprise_UI.Areas.ProductSetup.Models;
using eSyaEnterprise_UI.DataServices;
using eSyaEnterprise_UI.Extension;
using eSyaEnterprise_UI.Models;
using eSyaEnterprise_UI.Utility;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
namespace eSyaEnterprise_UI.Areas.ProductSetup.Controllers
{
    [SessionTimeout]
    public class LicenseController : Controller
    {
        private readonly IeSyaProductSetupAPIServices _eSyaProductSetupAPIServices;
        private readonly ILogger<LicenseController> _logger;


        public LicenseController(IeSyaProductSetupAPIServices eSyaProductSetupAPIServices, ILogger<LicenseController> logger)
        {
            _eSyaProductSetupAPIServices = eSyaProductSetupAPIServices;
            _logger = logger;
        }

        #region Business Entity
        /// <summary>
        /// Business Entity
        /// </summary>
        /// <returns></returns>
        [Area("ProductSetup")]
        [ServiceFilter(typeof(ViewBagActionFilter))]
        public IActionResult EPS_16_00()
        {
            return View();
        }

        /// <summary>
        ///Get Business Entities for Grid
        /// </summary>
        [HttpPost]
        public async Task<JsonResult> GetBusinessEntities()
        {
            try
            {
                var serviceResponse = await _eSyaProductSetupAPIServices.HttpClientServices.GetAsync<List<DO_BusinessEntity>>("License/GetBusinessEntities");
                if (serviceResponse.Status)
                {
                    if (serviceResponse.Data != null)
                    {
                        return Json(serviceResponse.Data);
                    }
                    else
                    {
                        _logger.LogError(new Exception(serviceResponse.Message), "UD:GetBusinessEntities");
                        return Json(new { Status = false, StatusCode = "500" });
                    }
                }
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetBusinessEntities");
                    return Json(new { Status = false, StatusCode = "500" });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetBusinessEntities");
                throw;
            }

        }

        /// <summary>
        ///Get Business Entities for Tree View
        /// </summary>
        //[Produces("application/json")]
        [HttpGet]
        public async Task<JsonResult> GetBusinessEntitiesforTreeView()
        {
            try
            {
                List<jsTreeObject> jsTree = new List<jsTreeObject>();

                jsTreeObject jsObj = new jsTreeObject
                {
                    id = "MM",
                    parent = "#",
                    text = "Business Entity",
                    state = new stateObject { opened = true, selected = false }
                };
                jsTree.Add(jsObj);

                var serviceResponse = await _eSyaProductSetupAPIServices.HttpClientServices.GetAsync<List<DO_BusinessEntity>>("License/GetBusinessEntities");
                if (serviceResponse.Status)
                {
                    var BusinessEntities = serviceResponse.Data;
                    if (BusinessEntities != null)
                    {
                        foreach (var f in BusinessEntities.OrderBy(o => o.BusinessId))
                        {
                            jsObj = new jsTreeObject
                            {
                                id = "FM" + f.BusinessId.ToString() + "_" + f.BusinessId.ToString(),
                                text = f.BusinessDesc,
                                //GroupIndex = f.BusinessId.ToString() + "_" + f.ActiveStatus.ToString() + "_" + f.IsMultiSegmentApplicable.ToString(),
                                GroupIndex = f.BusinessId.ToString() + "_" + f.ActiveStatus.ToString(),
                                parent = "MM",
                                state = new stateObject { opened = true, selected = false }
                            };
                            jsTree.Add(jsObj);
                        }
                    }
                    return Json(jsTree);
                }
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetBusinessEntitiesforTreeView");
                    return Json(new { Status = false, StatusCode = "500" });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetBusinessEntitiesforTreeView");
                throw;
                //return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }
        }

        /// <summary>
        ///Get Business Entity Info
        /// </summary>
        [HttpPost]
        public async Task<JsonResult> GetBusinessEntityInfo(int BusinessId)
        {
            try
            {
                var parameter = "?BusinessId=" + BusinessId;
                var serviceResponse = await _eSyaProductSetupAPIServices.HttpClientServices.GetAsync<DO_BusinessEntity>("License/GetBusinessEntityInfo" + parameter);
                if (serviceResponse.Status)
                {
                    if (serviceResponse.Data != null)
                    {
                        return Json(serviceResponse.Data);
                    }
                    else
                    {
                        _logger.LogError(new Exception(serviceResponse.Message), "UD:GetBusinessEntityInfo:For BusinessId {0}", BusinessId);
                        return Json(new { Status = false, StatusCode = "500" });
                    }
                }
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetBusinessEntityInfo:For BusinessId {0}", BusinessId);
                    return Json(new { Status = false, StatusCode = "500" });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetBusinessEntityInfo:For BusinessId {0}", BusinessId);
                throw;
            }
        }

        /// <summary>
        /// Insert or Update Business Entity
        /// </summary>
        [HttpPost]
        public async Task<JsonResult> InsertOrUpdateBusinessEntity(DO_BusinessEntity businessentity)
        {
            try
            {
                if (businessentity.BusinessUnitType == 'S'.ToString())
                {
                    businessentity.NoOfUnits = 1;
                }
                if (businessentity.BusinessUnitType == 'S'.ToString())
                {
                    businessentity.IsMultiSegmentApplicable = false;
                }
                if (businessentity.BusinessUnitType == 'M'.ToString())
                {
                    businessentity.IsMultiSegmentApplicable = true;
                }
                if (string.IsNullOrEmpty(businessentity.BusinessDesc))
                {
                    return Json(new DO_ReturnParameter() { Status = false, Message = "Please Enter Entity Description" });
                }
                else
                {
                    if (businessentity.l_Preferredlang != null)
                    {
                        businessentity.l_Preferredlang.All(c =>
                        {
                            c.UserID = AppSessionVariables.GetSessionUserID(HttpContext);
                            c.TerminalID = AppSessionVariables.GetIPAddress(HttpContext);
                            c.FormID = AppSessionVariables.GetSessionFormInternalID(HttpContext);
                            return true;
                        });
                    }
                    businessentity.FormID = AppSessionVariables.GetSessionFormInternalID(HttpContext);
                    businessentity.UserID = AppSessionVariables.GetSessionUserID(HttpContext);
                    businessentity.TerminalID = AppSessionVariables.GetIPAddress(HttpContext);
                    if (businessentity.BusinessId == 0)
                    {
                        var serviceResponse = await _eSyaProductSetupAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("License/InsertBusinessEntity", businessentity);
                        if (serviceResponse.Status)
                            return Json(serviceResponse.Data);
                        else
                        {
                            _logger.LogError(new Exception(serviceResponse.Message), "UD:InsertOrUpdateBusinessEntity:params:" + JsonConvert.SerializeObject(businessentity));
                            return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });
                        }
                    }
                    else
                    {
                        var serviceResponse = _eSyaProductSetupAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("License/UpdateBusinessEntity", businessentity).Result;
                        if (serviceResponse.Status)
                            return Json(serviceResponse.Data);
                        else
                        {
                            _logger.LogError(new Exception(serviceResponse.Message), "UD:InsertOrUpdateBusinessEntity:params:" + JsonConvert.SerializeObject(businessentity));
                            return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:InsertOrUpdateBusinessEntity:params:" + JsonConvert.SerializeObject(businessentity));
                return Json(new { Status = false, Message = ex.ToString() });
            }
        }

        /// <summary>
        ///DELETE Business Entity
        /// </summary>
        [HttpPost]
        public async Task<JsonResult> DeleteBusinessEntity(int BusinessEntityId)
        {
            try
            {
                var parameter = "?BusinessEntityId=" + BusinessEntityId;
                var serviceResponse = await _eSyaProductSetupAPIServices.HttpClientServices.GetAsync<DO_ReturnParameter>("License/DeleteBusinessEntity" + parameter);
                if (serviceResponse.Status)
                    return Json(serviceResponse.Data);
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:DeleteBusinessEntity:For BusinessEntityId {0}}", BusinessEntityId);
                    return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:DeleteBusinessEntity:For BusinessEntityId {0}", BusinessEntityId);
                return Json(new { Status = false, Message = ex.ToString() });
                //return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }
        }
        /// <summary>
        ///Get Business Entity Preferred Language
        /// </summary>
        [HttpPost]
        public async Task<JsonResult> GetPreferredLanguagebyBusinessKey(int BusinessId)
        {
            try
            {
                var parameter = "?BusinessId=" + BusinessId;
                var serviceResponse = await _eSyaProductSetupAPIServices.HttpClientServices.GetAsync<List<DO_EntityPreferredLanguage>>("License/GetPreferredLanguagebyBusinessKey" + parameter);
                if (serviceResponse.Status)
                {
                    if (serviceResponse.Data != null)
                    {
                        return Json(serviceResponse.Data);
                    }
                    else
                    {
                        _logger.LogError(new Exception(serviceResponse.Message), "UD:GetPreferredLanguagebyBusinessKey:For BusinessId {0}", BusinessId);
                        return Json(new { Status = false, StatusCode = "500" });
                    }
                }
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetPreferredLanguagebyBusinessKey:For BusinessId {0}", BusinessId);
                    return Json(new { Status = false, StatusCode = "500" });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetPreferredLanguagebyBusinessKey:For BusinessId {0}", BusinessId);
                throw;
            }
        }
        #endregion Business Entity 

        #region New Business Location
        /// <summary>
        /// Business Location
        /// </summary>
        /// <returns></returns>
        /// 
        [Area("ProductSetup")]
        [ServiceFilter(typeof(ViewBagActionFilter))]
        public async Task<IActionResult> EPS_17_00()
        {
            try
            {
                ViewBag.UserFormRole = new DO_UserFormRole { IsInsert = true, IsEdit = true, IsView = true, IsDelete = true };

                /// Tax Identification for Dropdown
                var IsdcodeResponse = await _eSyaProductSetupAPIServices.HttpClientServices.GetAsync<List<DO_CountryCodes>>("ConfigMasterData/GetISDCodes");
                var serviceResponse = await _eSyaProductSetupAPIServices.HttpClientServices.GetAsync<List<DO_BusinessEntity>>("License/GetActiveBusinessEntities");

                if (serviceResponse.Status && IsdcodeResponse.Status)
                {
                    if (IsdcodeResponse.Data != null)
                    {
                        ViewBag.IsdCodes = IsdcodeResponse.Data.Select(b => new SelectListItem
                        {
                            Value = b.Isdcode.ToString(),
                            Text = b.CountryName,
                        }).ToList();

                        ViewBag.entity_list = serviceResponse.Data;
                    }
                    if (serviceResponse.Data != null)
                    {
                        ViewBag.entity_list = serviceResponse.Data.Select(b => new SelectListItem
                        {
                            Value = b.BusinessId.ToString(),
                            Text = b.BusinessDesc,
                        }).ToList();

                    }

                }
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:BusinessLocation");
                }

                return View();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:BusinessLocation");
                throw;
            }
        }
        /// <summary>
        ///Get Tax Idendification for drop down by Isd code
        /// </summary>
        [HttpGet]
        public async Task<JsonResult> GetTaxIdentificationListByIsdCode(int IsdCode)
        {
            try
            {
                var parameter = "?IsdCode=" + IsdCode;
                var serviceResponse = await _eSyaProductSetupAPIServices.HttpClientServices.GetAsync<List<DO_TaxIdentification>>("License/GetTaxIdentificationByISDCode" + parameter);

                if (serviceResponse.Status)
                {
                    if (serviceResponse.Data != null)
                    {
                        return Json(serviceResponse.Data);
                    }
                    else
                    {
                        _logger.LogError(new Exception(serviceResponse.Message), "UD:GetTaxIdentificationByISDCode:For BusinessId {0}", IsdCode);
                        return Json(new { Status = false, StatusCode = "500" });
                    }
                }
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetTaxIdentificationByISDCode:For BusinessId {0}", IsdCode);
                    return Json(new { Status = false, StatusCode = "500" });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetBusinessSegmentByBusinessId:For BusinessId {0}", IsdCode);
                throw;
            }
        }

        /// <summary>
        ///Get Currencies for drop down by Isd code 
        /// </summary>
        [HttpGet]
        public async Task<JsonResult> GetCurrencyListbyIsdCode(int IsdCode)
        {
            try
            {
                var parameter = "?IsdCode=" + IsdCode;
                var serviceResponse = await _eSyaProductSetupAPIServices.HttpClientServices.GetAsync<List<DO_CountryCodes>>("License/GetCurrencyListbyIsdCode" + parameter);

                if (serviceResponse.Status)
                {
                    if (serviceResponse.Data != null)
                    {
                        return Json(serviceResponse.Data);
                    }
                    else
                    {
                        _logger.LogError(new Exception(serviceResponse.Message), "UD:GetCurrencyListbyIsdCode:For IsdCode {0}", IsdCode);
                        return Json(new { Status = false, StatusCode = "500" });
                    }
                }
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetCurrencyListbyIsdCode:For IsdCode {0}", IsdCode);
                    return Json(new { Status = false, StatusCode = "500" });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetCurrencyListbyIsdCode:For IsdCode {0}", IsdCode);
                throw;
            }
        }
        /// <summary>
        /// Get City List by isdCode and stateCode.
        /// </summary>
        [HttpGet]
        public async Task<JsonResult> GetCityListbyISDCode(int isdCode)
        {
            try
            {
                var parameter = "?isdCode=" + isdCode;
                var serviceResponse = await _eSyaProductSetupAPIServices.HttpClientServices.GetAsync<List<DO_Cities>>("License/GetCityListbyISDCode" + parameter);
                if (serviceResponse.Status)
                {
                    return Json(serviceResponse.Data);

                }
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetCityListbyISDCode:For isdCode {0} ", isdCode);
                    return Json(new { Status = false, StatusCode = "500" });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetCityListbyISDCode:For isdCode {0} ", isdCode);
                throw;
            }
        }

        /// <summary>
        ///Get Business Locations  for Grid
        /// </summary>
        [HttpPost]
        public async Task<JsonResult> GetBusinessLocationByBusinessId(int BusinessId)
        {

            try
            {
                var serviceResponse = await _eSyaProductSetupAPIServices.HttpClientServices.GetAsync<List<DO_BusinessLocation>>("License/GetBusinessLocationByBusinessId?BusinessId=" + BusinessId);
                if (serviceResponse.Status)
                {
                    return Json(serviceResponse.Data);
                }
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetBusinessLocationByBusinessId");
                    return Json(new { Status = false, StatusCode = "500" });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetBusinessLocationByBusinessId");
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }

        }

        /// <summary>
        /// Insert or Update Business Locations
        /// </summary>
        [HttpPost]
        public async Task<JsonResult> InsertOrUpdateBusinessLocation(bool isInsert, DO_BusinessLocation obj)
        {

            try
            {
                //if (obj.EBusinessKey == null)
                //{
                //    obj.EBusinessKey = Encoding.ASCII.GetBytes("0");
                //}
                //if (obj.EActiveUsers == null)
                //{
                //    obj.EActiveUsers = Encoding.ASCII.GetBytes("0");
                //}

                obj.UserID = AppSessionVariables.GetSessionUserID(HttpContext);
                obj.TerminalID = AppSessionVariables.GetIPAddress(HttpContext);
                obj.FormId = AppSessionVariables.GetSessionFormInternalID(HttpContext);
                if (obj.l_BSCurrency != null)
                {
                    obj.l_BSCurrency.All(c =>
                    {
                        c.UserID = AppSessionVariables.GetSessionUserID(HttpContext);
                        c.TerminalId = AppSessionVariables.GetIPAddress(HttpContext);
                        c.FormID = AppSessionVariables.GetSessionFormInternalID(HttpContext);
                        return true;
                    });
                }

                if (obj.l_Preferredlanguage != null)
                {
                    obj.l_Preferredlanguage.All(c =>
                    {
                        c.UserID = AppSessionVariables.GetSessionUserID(HttpContext);
                        c.TerminalId = AppSessionVariables.GetIPAddress(HttpContext);
                        c.FormID = AppSessionVariables.GetSessionFormInternalID(HttpContext);
                        return true;
                    });
                }
                if (isInsert)
                {
                    var serviceResponse = await _eSyaProductSetupAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("License/InsertBusinessLocation", obj);
                    if (serviceResponse.Status)
                        return Json(serviceResponse.Data);
                    else
                        return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });
                }
                else
                {
                    var serviceResponse = await _eSyaProductSetupAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("License/UpdateBusinessLocation", obj);
                    if (serviceResponse.Status)
                        return Json(serviceResponse.Data);
                    else
                        return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:InsertOrUpdateBusinessLocation:params:" + JsonConvert.SerializeObject(obj));
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }
        }

        /// <summary>
        /// Activate or De Activate Business Location
        /// </summary>
        [HttpPost]
        public async Task<JsonResult> ActiveOrDeActiveBusinessLocation(bool status, int BusinessId, int locationId)
        {

            try
            {

                var parameter = "?status=" + status + "&BusinessId=" + BusinessId + "&locationId=" + locationId;
                var serviceResponse = await _eSyaProductSetupAPIServices.HttpClientServices.GetAsync<DO_ReturnParameter>("License/ActiveOrDeActiveBusinessLocation" + parameter);
                if (serviceResponse.Status)
                    return Json(serviceResponse.Data);
                else
                    return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });

            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:ActiveOrDeActiveBusinessLocation:For BusinessId {0} ", BusinessId);
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }
        }


        [HttpPost]
        public async Task<JsonResult> GetStateCodeByISDCode(int isdCode, int TaxIdentificationId)
        {
            try
            {
                var parameter = "?isdCode=" + isdCode + "&TaxIdentificationId=" + TaxIdentificationId;
                var serviceResponse = await _eSyaProductSetupAPIServices.HttpClientServices.GetAsync<DO_TaxIdentification>("License/GetStateCodeByISDCode" + parameter);
                if (serviceResponse.Status)
                {
                    if (serviceResponse.Data != null)
                    {
                        return Json(serviceResponse.Data);
                    }
                    else
                    {
                        _logger.LogError(new Exception(serviceResponse.Message), "UD:GetStateCodeByISDCode:For TaxIdentificationId {0}", TaxIdentificationId);
                        return Json(new { Status = false, StatusCode = "500" });
                    }
                }
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetStateCodeByISDCode:For TaxIdentificationId {0}", TaxIdentificationId);
                    return Json(new { Status = false, StatusCode = "500" });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetStateCodeByISDCode:For TaxIdentificationId {0}", TaxIdentificationId);
                throw;
            }
        }

        /// <summary>
        ///Get Business Location Currency for Grid
        /// </summary>
        [HttpPost]
        public async Task<JsonResult> GetCurrencybyBusinessKey(int BusinessKey)
        {
            try
            {

                var serviceResponse = await _eSyaProductSetupAPIServices.HttpClientServices.GetAsync<List<DO_BusienssSegmentCurrency>>("License/GetCurrencybyBusinessKey?BusinessKey=" + BusinessKey);
                if (serviceResponse.Status)
                {
                    if (serviceResponse.Data != null)
                    {
                        return Json(serviceResponse.Data);
                    }
                    else
                    {
                        _logger.LogError(new Exception(serviceResponse.Message), "UD:GetCurrencybyBusinessKey:For BusinessKey {0}", BusinessKey);
                        return Json(new { Status = false, StatusCode = "500" });
                    }
                }
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetCurrencybyBusinessKey:For BusinessKey {0}", BusinessKey);
                    return Json(new { Status = false, StatusCode = "500" });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetCurrencybyBusinessKey:For BusinessId {0} BusinessKey", BusinessKey);
                throw;
            }
        }

        /// <summary>
        ///Get Business Unit Type by Entity Id
        /// </summary>
        [HttpPost]
        public async Task<JsonResult> GetBusinessUnitType(int businessId)
        {
            try
            {

                var serviceResponse = await _eSyaProductSetupAPIServices.HttpClientServices.GetAsync<DO_BusinessEntity>("License/GetBusinessUnitType?businessId=" + businessId);
                if (serviceResponse.Status)
                {
                    return Json(serviceResponse.Data);
                }
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetBusinessUnitType:For businessId {0}", businessId);
                    return Json(new { Status = false, StatusCode = "500" });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetBusinessUnitType:For BusinessId {0}", businessId);
                throw;
            }
        }


        /// <summary>
        ///Get Business Location Parameters by Business Key for Grid
        /// </summary>
        [HttpPost]
        public async Task<JsonResult> GetLocationParametersbyBusinessKey(int BusinessKey)
        {
            try
            {

                var serviceResponse = await _eSyaProductSetupAPIServices.HttpClientServices.GetAsync<List<DO_eSyaParameter>>("License/GetLocationParametersbyBusinessKey?BusinessKey=" + BusinessKey);
                if (serviceResponse.Status)
                {
                    if (serviceResponse.Data != null)
                    {
                        return Json(serviceResponse.Data);
                    }
                    else
                    {
                        _logger.LogError(new Exception(serviceResponse.Message), "UD:GetLocationParametersbyBusinessKey:For BusinessKey {0}", BusinessKey);
                        return Json(new { Status = false, StatusCode = "500" });
                    }
                }
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetLocationParametersbyBusinessKey:For BusinessKey {0}", BusinessKey);
                    return Json(new { Status = false, StatusCode = "500" });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetLocationParametersbyBusinessKey:For BusinessKey {0} BusinessKey", BusinessKey);
                throw;
            }
        }

        /// <summary>
        ///Get State Code by Tax Idendification
        /// </summary>
        [HttpPost]
        public async Task<JsonResult> GetLocationPreferredLanguagebyBusinessKey(int businessId, int BusinessKey)
        {
            try
            {
                var parameter = "?BusinessID=" + businessId + "&BusinessKey=" + BusinessKey;
                var serviceResponse = await _eSyaProductSetupAPIServices.HttpClientServices.GetAsync<List<DO_LocationPreferredLanguage>>("License/GetLocationPreferredLanguagebyBusinessKey" + parameter);
                if (serviceResponse.Status)
                {
                    if (serviceResponse.Data != null)
                    {
                        return Json(serviceResponse.Data);
                    }
                    else
                    {
                        _logger.LogError(new Exception(serviceResponse.Message), "UD:GetLocationPreferredLanguagebyBusinessKey:For BusinessKey {0}", BusinessKey);
                        return Json(new { Status = false, StatusCode = "500" });
                    }
                }
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetLocationPreferredLanguagebyBusinessKey:For BusinessKey {0}", BusinessKey);
                    return Json(new { Status = false, StatusCode = "500" });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetLocationPreferredLanguagebyBusinessKey:For BusinessKey {0}", BusinessKey);
                throw;
            }
        }


        #endregion

        #region Location Financial Info
        /// <summary>
        /// Get Existing Locations as Segment if IsBookofAccount is checked.
        /// </summary>
        [HttpGet]
        public async Task<JsonResult> GetActiveLocationsAsSegments()
        {
            try
            {
                var serviceResponse = await _eSyaProductSetupAPIServices.HttpClientServices.GetAsync<List<DO_BusinessLocation>>("License/GetActiveLocationsAsSegments");
                if (serviceResponse.Status)
                {
                    return Json(serviceResponse.Data);

                }
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetActiveLocationsAsSegments");
                    return Json(new { Status = false, StatusCode = "500" });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetActiveLocationsAsSegments");
                throw;
            }
        }

        /// <summary>
        ///Get Location Financial Info by BusinessKey
        /// </summary>
        [HttpPost]
        public async Task<JsonResult> GetLocationFinancialInfo(int BusinessKey)
        {
            try
            {

                var serviceResponse = await _eSyaProductSetupAPIServices.HttpClientServices.GetAsync<DO_LocationFinancialInfo>("License/GetLocationFinancialInfo?BusinessKey=" + BusinessKey);
                if (serviceResponse.Status)
                {
                    return Json(serviceResponse.Data);

                }
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetLocationFinancialInfo:For BusinessKey {0}", BusinessKey);
                    return Json(new { Status = false, StatusCode = "500" });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetLocationFinancialInfo:For BusinessKey {0} BusinessKey", BusinessKey);
                throw;
            }
        }

        /// <summary>
        /// Insert or Update Location Financial Info
        /// </summary>
        [HttpPost]
        public async Task<JsonResult> InsertOrUpdateLocationFinancialInfo(DO_LocationFinancialInfo obj)
        {
            try
            {

                obj.FormID = AppSessionVariables.GetSessionFormInternalID(HttpContext);
                obj.UserID = AppSessionVariables.GetSessionUserID(HttpContext);
                obj.TerminalId = AppSessionVariables.GetIPAddress(HttpContext);
                var serviceResponse = await _eSyaProductSetupAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("License/InsertOrUpdateLocationFinancialInfo", obj);
                if (serviceResponse.Status)
                    return Json(serviceResponse.Data);
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:InsertOrUpdateBusinessSubscription:params:" + JsonConvert.SerializeObject(obj));
                    return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });
                }

            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:InsertOrUpdateBusinessSubscription:params:" + JsonConvert.SerializeObject(obj));
                return Json(new { Status = false, Message = ex.ToString() });
            }
        }
        #endregion

        #region Location License Info
        /// <summary>
        ///Get Location License Info by BusinessKey
        /// </summary>
        [HttpPost]
        public async Task<JsonResult> GetLocationLicenseInfo(int BusinessKey)
        {
            try
            {

                var serviceResponse = await _eSyaProductSetupAPIServices.HttpClientServices.GetAsync<DO_LocationLicenseInfo>("License/GetLocationLicenseInfo?BusinessKey=" + BusinessKey);
                if (serviceResponse.Status)
                {
                    return Json(serviceResponse.Data);

                }
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetLocationLicenseInfo:For BusinessKey {0}", BusinessKey);
                    return Json(new { Status = false, StatusCode = "500" });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetLocationLicenseInfo:For BusinessKey {0} BusinessKey", BusinessKey);
                throw;
            }
        }

        /// <summary>
        /// Insert or Update Location License Info
        /// </summary>
        [HttpPost]
        public async Task<JsonResult> InsertOrUpdateLocationLicenseInfo(DO_LocationLicenseInfo obj)
        {
            try
            {
                if (obj.EBusinessKey == null)
                {
                    obj.EBusinessKey = Encoding.ASCII.GetBytes("0");
                }
                if (obj.EActiveUsers == null)
                {
                    obj.EActiveUsers = Encoding.ASCII.GetBytes("0");
                }
                obj.FormID = AppSessionVariables.GetSessionFormInternalID(HttpContext);
                obj.UserID = AppSessionVariables.GetSessionUserID(HttpContext);
                obj.TerminalId = AppSessionVariables.GetIPAddress(HttpContext);
                var serviceResponse = await _eSyaProductSetupAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("License/InsertOrUpdateLocationLicenseInfo", obj);
                if (serviceResponse.Status)
                    return Json(serviceResponse.Data);
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:InsertOrUpdateLocationLicenseInfo:params:" + JsonConvert.SerializeObject(obj));
                    return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });
                }

            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:InsertOrUpdateLocationLicenseInfo:params:" + JsonConvert.SerializeObject(obj));
                return Json(new { Status = false, Message = ex.ToString() });
            }
        }
        #endregion

        #region Location Tax Info
        /// <summary>
        ///Get Location Tax Info by BusinessKey
        /// </summary>
        [HttpPost]
        public async Task<JsonResult> GetLocationLocationTaxInfo(int BusinessKey)
        {
            try
            {

                var serviceResponse = await _eSyaProductSetupAPIServices.HttpClientServices.GetAsync<DO_LocationTaxInfo>("License/GetLocationLocationTaxInfo?BusinessKey=" + BusinessKey);
                if (serviceResponse.Status)
                {
                    return Json(serviceResponse.Data);

                }
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetLocationLocationTaxInfo:For BusinessKey {0}", BusinessKey);
                    return Json(new { Status = false, StatusCode = "500" });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetLocationLocationTaxInfo:For BusinessKey {0} BusinessKey", BusinessKey);
                throw;
            }
        }

        /// <summary>
        /// Insert or Update Location Tax Info
        /// </summary>
        [HttpPost]
        public async Task<JsonResult> InsertOrUpdateLocationTaxInfo(DO_LocationTaxInfo obj)
        {
            try
            {

                obj.FormID = AppSessionVariables.GetSessionFormInternalID(HttpContext);
                obj.UserID = AppSessionVariables.GetSessionUserID(HttpContext);
                obj.TerminalId = AppSessionVariables.GetIPAddress(HttpContext);
                var serviceResponse = await _eSyaProductSetupAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("License/InsertOrUpdateLocationTaxInfo", obj);
                if (serviceResponse.Status)
                    return Json(serviceResponse.Data);
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:InsertOrUpdateLocationTaxInfo:params:" + JsonConvert.SerializeObject(obj));
                    return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });
                }

            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:InsertOrUpdateLocationTaxInfo:params:" + JsonConvert.SerializeObject(obj));
                return Json(new { Status = false, Message = ex.ToString() });
            }
        }
        #endregion

        #region Business Subscription
        /// <summary>
        /// Business Subscription
        /// </summary>
        /// <returns></returns>
        /// 
        [Area("ProductSetup")]
        [ServiceFilter(typeof(ViewBagActionFilter))]
        public async Task<IActionResult> EPS_18_00()
        {
            try
            {
                ///Getting Business Key
                var Bk_response = await _eSyaProductSetupAPIServices.HttpClientServices.GetAsync<List<DO_BusinessLocation>>("ConfigMasterData/GetBusinessKey");

                if (Bk_response.Status)
                {
                    if (Bk_response.Data != null)
                    {
                        ViewBag.BusinessKeyList = Bk_response.Data.Select(b => new SelectListItem
                        {
                            Value = b.BusinessKey.ToString(),
                            Text = b.LocationDescription.ToString(),
                        }).ToList();
                    }
                    else
                    {
                        _logger.LogError(new Exception(Bk_response.Message), "UD:BusinessSubscription");
                    }
                }
                else
                {
                    _logger.LogError(new Exception(Bk_response.Message), "UD:BusinessSubscription");
                }
                return View();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:BusinessSubscription");
                throw;
            }
        }

        /// <summary>
        ///Get Business Subscription by Business Key for Grid
        /// </summary>
        [HttpPost]
        public async Task<JsonResult> GetBusinessSubscription(int BusinessKey)
        {
            try
            {
                var parameter = "?BusinessKey=" + BusinessKey;
                var serviceResponse = await _eSyaProductSetupAPIServices.HttpClientServices.GetAsync<List<DO_BusinessSubscription>>("License/GetBusinessSubscription" + parameter);
                if (serviceResponse.Status)
                {
                    if (serviceResponse.Data != null)
                    {
                        return Json(serviceResponse.Data);
                    }
                    else
                    {
                        _logger.LogError(new Exception(serviceResponse.Message), "UD:GetBusinessSubscription:For BusinessKey {0}", BusinessKey);
                        return Json(new { Status = false, StatusCode = "500" });
                    }
                }
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetBusinessSubscription:For BusinessKey {0}", BusinessKey);
                    return Json(new { Status = false, StatusCode = "500" });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetBusinessSubscription:For BusinessKey {0}", BusinessKey);
                throw;
            }
        }

        /// <summary>
        /// Insert or Update Business Subscription
        /// </summary>
        [HttpPost]
        public async Task<JsonResult> InsertOrUpdateBusinessSubscription(DO_BusinessSubscription busssubs)
        {
            try
            {
                if (string.IsNullOrEmpty(busssubs.BusinessKey.ToString()) || busssubs.BusinessKey == 0)
                {
                    return Json(new DO_ReturnParameter() { Status = false, Message = "Please Select Business Key" });
                }
                else if (busssubs.SubscribedFrom > busssubs.SubscribedTill)
                {
                    return Json(new DO_ReturnParameter() { Status = false, Message = "Subscribed Till Date can't Less Than Subscribed From." });
                }

                else if (busssubs.SubscribedTill < System.DateTime.Now)
                {
                    return Json(new DO_ReturnParameter() { Status = false, Message = "Subscribed Till Date can't Less Than Current Date." });
                }
                else
                {
                    busssubs.FormID = AppSessionVariables.GetSessionFormInternalID(HttpContext);
                    busssubs.UserID = AppSessionVariables.GetSessionUserID(HttpContext);
                    busssubs.TerminalID = AppSessionVariables.GetIPAddress(HttpContext);

                    var serviceResponse = await _eSyaProductSetupAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("License/InsertOrUpdateBusinessSubscription", busssubs);
                    if (serviceResponse.Status)
                        return Json(serviceResponse.Data);
                    else
                    {
                        _logger.LogError(new Exception(serviceResponse.Message), "UD:InsertOrUpdateBusinessSubscription:params:" + JsonConvert.SerializeObject(busssubs));
                        return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:InsertOrUpdateBusinessSubscription:params:" + JsonConvert.SerializeObject(busssubs));
                return Json(new { Status = false, Message = ex.ToString() });
            }
        }
        #endregion

        #region Tax Identification
        [Area("ProductSetup")]
        [ServiceFilter(typeof(ViewBagActionFilter))]
        public async Task<IActionResult> EPS_19_00()
        {
            try
            {
                var serviceResponse = await _eSyaProductSetupAPIServices.HttpClientServices.GetAsync<List<DO_CountryCodes>>("ConfigMasterData/GetIndiaISDCodes");
                if (serviceResponse.Status)
                {
                    if (serviceResponse.Data != null)
                    {
                        ViewBag.ISDCodeList = serviceResponse.Data.Select(b => new SelectListItem
                        {
                            Value = b.Isdcode.ToString(),
                            Text = b.Isdcode.ToString() + '-' + b.CountryName,
                        }).ToList();
                    }
                    else
                    {
                        _logger.LogError(new Exception(serviceResponse.Message), "UD:TaxIdentification");
                    }
                }
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:TaxIdentification");
                }
                return View();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:TaxIdentification");
                throw;
            }
        }
        /// <summary>
        ///Get Tax Identification by Country Code for Grid
        /// </summary>
        [HttpPost]
        public async Task<JsonResult> GetTaxIdentificationByISDCode(int ISDCode)
        {
            try
            {
                var parameter = "?ISDCode=" + ISDCode;
                var serviceResponse = await _eSyaProductSetupAPIServices.HttpClientServices.GetAsync<List<DO_TaxIdentification>>("TaxIdentification/GetTaxIdentificationByISDCode" + parameter);
                if (serviceResponse.Status)
                {
                    if (serviceResponse.Data != null)
                    {
                        return Json(serviceResponse.Data);
                    }
                    else
                    {
                        _logger.LogError(new Exception(serviceResponse.Message), "UD:GetTaxIdentificationByISDCode:For ISDCode {0}", ISDCode);
                        return Json(new { Status = false, StatusCode = "500" });
                    }
                }
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetTaxIdentificationByISDCode:For ISDCode {0}", ISDCode);
                    return Json(new { Status = false, StatusCode = "500" });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetTaxIdentificationByISDCode:For ISDCode {0}", ISDCode);
                throw;
                //return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }
        }


        /// <summary>
        /// Insert Tax Identification 
        /// </summary>
        [HttpPost]
        public async Task<JsonResult> InsertOrUpdateTaxIdentification(DO_TaxIdentification tax_Ident)
        {
            try
            {
                if (string.IsNullOrEmpty(tax_Ident.TaxIdentificationId.ToString()) || tax_Ident.TaxIdentificationId == 0)
                {
                    return Json(new DO_ReturnParameter() { Status = false, Message = "Please Enter Tax Identification" });
                }
                if (string.IsNullOrEmpty(tax_Ident.TaxIdentificationDesc))
                {
                    return Json(new DO_ReturnParameter() { Status = false, Message = "Please Enter Tax Identification Description" });
                }
                //else if (string.IsNullOrEmpty(tax_Ident.TaxCode.ToString()) || tax_Ident.TaxCode == 0)
                //{
                //    return Json(new DO_ReturnParameter() { Status = false, Message = "Please Select Tax Description" });
                //}
                else
                {
                    tax_Ident.UserID = AppSessionVariables.GetSessionUserID(HttpContext);
                    tax_Ident.TerminalID = AppSessionVariables.GetIPAddress(HttpContext);
                    tax_Ident.FormId = AppSessionVariables.GetSessionFormInternalID(HttpContext);
                    if (tax_Ident.InsertStatus == 0)
                    {
                        var serviceResponse = await _eSyaProductSetupAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("TaxIdentification/InsertIntoTaxIdentiFication", tax_Ident);
                        if (serviceResponse.Status)
                            return Json(serviceResponse.Data);
                        else
                        {
                            _logger.LogError(new Exception(serviceResponse.Message), "UD:InsertOrUpdateTaxIdentification:params:" + JsonConvert.SerializeObject(tax_Ident));
                            return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });
                        }
                    }
                    else
                    {
                        var serviceResponse = await _eSyaProductSetupAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("TaxIdentification/UpdateTaxIdentiFication", tax_Ident);
                        if (serviceResponse.Status)
                            return Json(serviceResponse.Data);
                        else
                        {
                            _logger.LogError(new Exception(serviceResponse.Message), "UD:InsertOrUpdateTaxIdentification:params:" + JsonConvert.SerializeObject(tax_Ident));
                            return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:InsertOrUpdateTaxIdentification:params:" + JsonConvert.SerializeObject(tax_Ident));
                return Json(new { Status = false, Message = ex.ToString() });
                //return Json(new { Status = false, Message = ex.InnerException == null ? ex.Message.ToString() : ex.InnerException.Message });
            }
        }
        /// <summary>
        /// Activate or De Activate Tax Identification
        /// </summary>
        [HttpPost]
        public async Task<JsonResult> ActiveOrDeActiveTaxIdentification(bool status, int Isd_code, int TaxIdentificationId)
        {

            try
            {

                var parameter = "?status=" + status + "&Isd_code=" + Isd_code + "&TaxIdentificationId=" + TaxIdentificationId;
                var serviceResponse = await _eSyaProductSetupAPIServices.HttpClientServices.GetAsync<DO_ReturnParameter>("TaxIdentification/ActiveOrDeActiveTaxIdentification" + parameter);
                if (serviceResponse.Status)
                    return Json(serviceResponse.Data);
                else
                    return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });

            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:ActiveOrDeActiveTaxIdentification:For TaxIdentificationId {0} ", TaxIdentificationId);
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }
        }
        #endregion

        #region Location Wise Menu
        [Area("ProductSetup")]
        [ServiceFilter(typeof(ViewBagActionFilter))]
        public async Task<IActionResult> EPS_25_00()
        {
            var serviceResponse = await _eSyaProductSetupAPIServices.HttpClientServices.GetAsync<List<DO_BusinessLocation>>("ConfigMasterData/GetBusinessKey");
            if (serviceResponse.Status)
            {
                if (serviceResponse.Data != null)
                {
                    ViewBag.BusinessKey = serviceResponse.Data.Select(b => new SelectListItem
                    {
                        Value = b.BusinessKey.ToString(),
                        Text = b.LocationDescription,
                    }).ToList();
                }
            }
            else
            {
                _logger.LogError(new Exception(serviceResponse.Message), "UD:V_1511_00:GetBusinessKey");
            }
            return View();
        }

        string _MenuJSONFilePath = @"wwwroot\json\menuitem.json";

        [Produces("application/json")]
        [HttpGet]
        public async Task<ActionResult> GetLocationMenuLinkbyBusinessKey(int businesskey)
        {
            try
            {
                string baseURL = $"{this.Request.Scheme}://{this.Request.Host}{this.Request.PathBase}";
                List<jsTreeObject> jsTree = new List<jsTreeObject>();

                var eSyaMenuData = JsonStream.Read<MenuItem>(_MenuJSONFilePath);
                if (eSyaMenuData == null)
                    eSyaMenuData = new MenuItem() { MenuName = "eSya Menu" };

                jsTreeObject jsObj1 = new jsTreeObject
                {
                    id = "MM",
                    parent = "#",
                    text = eSyaMenuData.MenuName,
                    icon = baseURL + "/images/jsTree/foldergroupicon.png",
                    state = new stateObject { opened = true, selected = false, checkbox_disabled = false }
                };
                jsTree.Add(jsObj1);

                var serviceResponse = await _eSyaProductSetupAPIServices.HttpClientServices.GetAsync<DO_ConfigureMenu>("License/GetLocationMenuLinkbyBusinessKey?businesskey=" + businesskey);

                if (serviceResponse.Status)
                {
                    var configureMenu = serviceResponse.Data;

                    if (configureMenu != null)
                    {
                        List<DO_SubMenu> l_menu = new List<DO_SubMenu>();
                        //Add Main Menu
                        foreach (var m in configureMenu.l_MainMenu.OrderBy(o => o.MenuIndex))
                        {
                            jsTreeObject jsObj = new jsTreeObject
                            {
                                id = "MM" + m.MainMenuId.ToString(),
                                text = m.MainMenu,
                                icon = baseURL + "/images/jsTree/openfolder.png",
                                state = new stateObject { opened = false, selected = false, checkbox_disabled = false },
                                GroupIndex = m.MenuIndex.ToString(),
                                parent = "MM",
                            };
                            jsTree.Add(jsObj);

                            var sb = GetMenuFormItems(m.MainMenuId, 0, configureMenu.l_SubMenu, configureMenu.l_FormMenu);
                            l_menu.AddRange(sb);



                        }


                        //Add Sub Menu
                        //foreach (var s in configureMenu.l_SubMenu.OrderBy(o => o.MenuIndex))
                        var menu = l_menu.OrderBy(o => o.MenuIndex);
                        foreach (var s in menu)
                        {
                            if (!s.IsForm)
                            {
                                jsTreeObject jsObj = new jsTreeObject
                                {
                                    id = "SM" + s.MenuItemId.ToString(),
                                    text = s.MenuItemName,
                                    icon = baseURL + "/images/jsTree/openfolder.png",
                                    state = new stateObject { opened = false, selected = false, checkbox_disabled = false },
                                    GroupIndex = s.MenuIndex.ToString(),
                                    parent = s.ParentID == 0 ? "MM" + s.MainMenuId.ToString() : "SM" + s.ParentID.ToString()
                                };
                                jsTree.Add(jsObj);

                            }
                            else
                            {
                                jsTreeObject jsObj = new jsTreeObject
                                {
                                    id = "FM" + s.ParentID.ToString() + "_" + s.FormId.ToString(),
                                    text = s.MenuItemName,
                                    icon = baseURL + "/images/jsTree/fileIcon.png",
                                    state = new stateObject { opened = false, selected = s.ActiveStatus, checkbox_disabled = false },
                                    GroupIndex = s.MenuIndex.ToString(),
                                    parent = s.ParentID == 0 ? "MM" + s.MainMenuId.ToString() : "SM" + s.ParentID.ToString()
                                };
                                jsTree.Add(jsObj);
                            }
                        }



                    }

                    return Json(jsTree);
                }
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetConfigureMenuTreeView");
                    return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetConfigureMenuTreeView");
                throw;
            }
        }

        public List<DO_SubMenu> GetMenuFormItems(int mainMenuID, int menuItemID, List<DO_SubMenu> l_SubMenu, List<DO_FormMenu> l_FormMenu)
        {
            List<DO_SubMenu> l_menu = new List<DO_SubMenu>();
            var sb2 = l_SubMenu.Where(w => w.MainMenuId == mainMenuID && w.ParentID == menuItemID).OrderBy(o => o.MenuIndex).ToList();
            var fm2 = l_FormMenu.Where(w => w.MainMenuId == mainMenuID && w.MenuItemId == menuItemID).OrderBy(o => o.FormIndex);
            foreach (var f in fm2)
            {
                DO_SubMenu o = new DO_SubMenu();
                o.FormId = f.FormId;
                o.MenuItemName = f.FormNameClient;
                o.ActiveStatus = f.ActiveStatus;
                o.MenuIndex = f.FormIndex;
                o.ParentID = f.MenuItemId;
                o.MenuItemId = f.MenuItemId;
                o.MainMenuId = f.MainMenuId;
                o.IsForm = true;
                l_menu.Add(o);
            }
            l_menu.AddRange(sb2);

            foreach (var s in sb2)
                l_menu.AddRange(GetMenuFormItems(mainMenuID, s.MenuItemId, l_SubMenu, l_FormMenu));

            return l_menu;
        }
        public async Task<ActionResult> InsertOrUpdateLocationMenuLink(List<DO_LocationMenuLink> obj)
        {
            try
            {
                obj.All(c =>
                {
                    c.UserID = AppSessionVariables.GetSessionUserID(HttpContext);
                    c.TerminalID = AppSessionVariables.GetIPAddress(HttpContext);
                    return true;
                });


                var serviceResponse = await _eSyaProductSetupAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("License/InsertOrUpdateLocationMenuLink", obj);
                if (serviceResponse.Status)
                {
                    if (serviceResponse.Data != null)
                    {
                        return Json(serviceResponse.Data);
                    }
                    else
                    {
                        _logger.LogError(new Exception(serviceResponse.Data.Message), "UD:InsertOrUpdateLocationMenuLink:params:" + JsonConvert.SerializeObject(obj));
                        return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Data.Message });
                    }

                }
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:InsertOrUpdateLocationMenuLink:params:" + JsonConvert.SerializeObject(obj));
                    return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });
                }

            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:InsertOrUpdateLocationMenuLink:params:" + JsonConvert.SerializeObject(obj));
                return Json(new { Status = false, Message = ex.ToString() });
            }
        }
        #endregion



        #region Calendar Details

        [Area("ProductSetup")]
        [ServiceFilter(typeof(ViewBagActionFilter))]
        public async Task<IActionResult> EPS_30_00()
        {
            var serviceResponse = await _eSyaProductSetupAPIServices.HttpClientServices.GetAsync<List<DO_BusinessLocation>>("ConfigMasterData/GetBusinessKey");
            if (serviceResponse.Status)
            {
                if (serviceResponse.Data != null)
                {
                    ViewBag.BusinessKey = serviceResponse.Data.Select(b => new SelectListItem
                    {
                        Value = b.BusinessKey.ToString(),
                        Text = b.LocationDescription,
                    }).ToList();
                }
            }
            else
            {
                _logger.LogError(new Exception(serviceResponse.Message), "UD:V_1511_00:GetBusinessKey");
            }
            return View();
        }
        /// <summary>
        /// Getting Calendar Header for Grid
        /// </summary>

        [HttpPost]
        public async Task<JsonResult> GetCalendarHeaders()
        {
            try
            {
                var serviceResponse = await _eSyaProductSetupAPIServices.HttpClientServices.GetAsync<List<DO_CalendarHeader>>("Control/GetCalendarHeaders");
                if (serviceResponse.Status)
                {
                    return Json(serviceResponse.Data);

                }
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetCalendarHeaders");
                    return Json(new { Status = false, StatusCode = "500" });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetCalendarHeaders");
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }
        }

        /// <summary>
        /// Insert Calendar Header 
        /// </summary>
        [HttpPost]
        public async Task<JsonResult> InsertCalendarDetails(DO_CalendarHeader obj)
        {

            try
            {
                obj.UserID = AppSessionVariables.GetSessionUserID(HttpContext);
                obj.TerminalID = AppSessionVariables.GetIPAddress(HttpContext);
                obj.FormID = AppSessionVariables.GetSessionFormInternalID(HttpContext);
                var serviceResponse = await _eSyaProductSetupAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("Control/InsertCalendarDetails", obj);
                if (serviceResponse.Status)
                    return Json(serviceResponse.Data);
                else
                    return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });

            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:InsertCalendarDetails:params:" + JsonConvert.SerializeObject(obj));
                return Json(new { Status = false, Message = ex.InnerException == null ? ex.Message.ToString() : ex.InnerException.Message });
            }
        }
        #endregion Calendar detail


        [Area("ProductSetup")]
        public IActionResult EPS_26_00()
        {
            return View();
        }
    }
}
